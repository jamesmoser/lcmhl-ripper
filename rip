#!/usr/bin/env python

#
# Download and parse an icalendar from the LCMHL website (goalline) and optionally
# compare it to a saved game record.  Output to STDOUT is in a format used by the 
# Ice Allocator google spreadsheet.
# 
# James Moser
# james.moser@gmail.com
#

import argparse
import datetime
import icalendar
import json
import re
import requests
import sys

DIVISION = 'Atom'
GAME_RECORD_FILENAME_PATTERN = 'record.{}'

LEAGUES = {
# Atom
    "{} A".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=366d5-201909-202004-3102-297', },
    "{} B".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=bbf31-201909-202004-57039-297', },
    "{} C".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=34e6c-201909-202004-13658-297', },
# Peewee
#    "{} A".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=b254b-201909-202004-3105-297', },
#    "{} B".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=b7b39-201909-202004-57040-297', },
#    "{} C".format(DIVISION) : { 'url' : 'http://cdn.goalline.ca/subscribe_ical.php?cal=584f9-201909-202004-3107-297', },
}

class Game():
    def __init__(self, league, type, date, time, venue, id, home, away, note="", key=None):
        self.league = league
        self.type = type
        self.date = date
        self.time = time
        self.venue = venue
        self.id = id
        self.home = home
        self.away = away
        self.note = note
        if key:
            self.key = key
        else:
            self.key = Game.__key(self.date, self.time, self.venue)

    @classmethod
    def fromstr(cls, line):
        key, league, type, id, venue, date, time, home, away = line.split(',')
        return cls(league, type, date, time, venue, id, home, away, key=key)

    @staticmethod
    def __key(date, time, venue):
        return "{}-{}-{}".format(
            re.sub(r"\W", '', venue)[0:4].upper(), 
            re.sub(r"-", '', str(date)), 
            datetime.datetime.strptime(time, '%I:%M %p').strftime('%H%M')
        )

    def __str__(self):
        return "{},{},{},{},{},{},{},{},{}".format(
            self.key, self.league, self.type, self.id, self.venue, self.date, self.time, self.home, self.away)

class Schedule():
    def __init__(self, league):
        self.league = league
        self.games = []

    def print(self):
        for game in self.games:
            print(game)

    def save(self):
        with open(GAME_RECORD_FILENAME_PATTERN.format(re.sub(r"\s", '-', self.league.lower())), 'w') as fn:
            for game in self.games:
                fn.write("{}\n".format(game))

    def record(self):
        record = {}
        for game in self.games:
            record[game.key] = "{} @ {}".format(game.away, game.home)
        return record

    def compare(self, other):
       srecord = self.record()
       orecord = other.record()
       for key in srecord.keys():
           if key not in orecord.keys():
               print("{} -- {} -- NONE".format(key, srecord[key]))
           elif srecord[key] != orecord[key]:
               print("{} -- {} -- {}".format(key, srecord[key], orecord[key]))
       for key in orecord.keys():
           if key not in srecord.keys():
               print("{} -- NONE -- {}".format(key, orecord[key]))

class GameRecord(Schedule):
    def __init__(self, league):
        Schedule.__init__(self, league)
        with open(GAME_RECORD_FILENAME_PATTERN.format(re.sub(r"\s", '-', self.league.lower())), 'r') as fn:
            for cnt, line in enumerate(fn):
                self.games.append(Game.fromstr(line.rstrip()))

class Calendar(Schedule):
    def __init__(self, league, tzoffset=5):
        Schedule.__init__(self, league)
        response = requests.get(LEAGUES[league]['url'])
        response.raise_for_status()
        calendar = icalendar.Calendar.from_ical(response.text)
        for component in calendar.walk():
            if component.name == "VEVENT":
                try:
                    away, home, type, id, note = Calendar.__parseDescription(component.get('description'))
                except Exception:
                    continue
                self.games.append(Game(
                    league,
                    type,
                    (component.get('dtstart').dt.replace(tzinfo=datetime.timezone.utc).astimezone(tz=None)).date(),
                    (component.get('dtstart').dt.replace(tzinfo=datetime.timezone.utc).astimezone(tz=None)).strftime("%I:%M %p"),
                    (component.get('location').split(','))[0],
                    id,
                    home,
                    away,
                    note
                ))

    @staticmethod
    def __parseDescription(text):
        m = re.match(r"(.+?)\s*@\s*(.+?)s*-\s*Regular Season GAME\s*-\s*LCMHL Game No.+?(\d+)\s*-\s*(.+?)\s*$", text)
        if m:
            return m.group(1), m.group(2), "REGULAR SEASON", m.group(3), m.group(4)
        m = re.match(r"(.+?)\s*@\s*(.+?)s*-\s*Regular Season GAME\s*-\s*LCMHL Game No.+?(\d+)\s*$", text)
        if m:
            return m.group(1), m.group(2), "REGULAR SEASON", m.group(3), ""
        m = re.match(r"(.+?)\s*@\s*(.+?)s*-.+GAME\s*-\s*LCMHL Game No.+?(\d+)\s*$", text)
        if m:
            return m.group(1), m.group(2), "PLAYOFF", m.group(3), ""
        raise ValueError()


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description="Rip and optionally compare game data from the LCMHL (goalline) website")
    parser.add_argument('--league', type=str, default='X', help="League A, B, C for the {} division".format(DIVISION))
    parser.add_argument('--save', action='store_true', default=False, help='Save the schedule to a game record')
    parser.add_argument('--compare', action='store_true', default=False, help='Compare the schedule to the saved game record')
    args = parser.parse_args()

    VALID_LEAGUE_ARGS = ['A', 'B', 'C']
    if args.league not in VALID_LEAGUE_ARGS:
        print("Supplied league must in [{}]".format(', '.join(VALID_LEAGUE_ARGS)))
        sys.exit(1)
    args.league = "{} {}".format(DIVISION, args.league)

    try:
        calendar = Calendar(args.league)
    except Exception as e:
        print("Unable to load calendar ({})".format(e))
        sys.exit(1)

    if not args.compare:
        calendar.print()
        if args.save:
            calendar.save()
    else:
        record = GameRecord(args.league)
        calendar.compare(record)

    sys.exit(0)
